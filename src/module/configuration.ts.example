import Document = foundry.abstract.Document;

type ActorType = "npc" | "character";

// These classes would ordinarily be imported from another file.
declare class MyActor<Type extends ActorType> extends Actor {
  type: Type;
}

declare class MyItem extends Item {}

// If you are writing a system then this file will be of use of you.
// Otherwise you can delete it.
declare module "fvtt-types/configuration" {
  interface DocumentClassConfig {
    // You should fill in all of the classes's generic parameters.
    // This can help avoid some especially difficult to avoid circularities.
    // e.g in `SubType extends Actor.SubType` the type `Actor.SubType` is the constraint.
    Actor: typeof MyActor<Item.SubType>;
    Item: typeof MyItem<Item.SubType>;
  }

  interface DataModelConfig {}
}

// Writing something like this during debugging is useful to see if configuration is working.
// If you hover over this type you should see it equals `typeof MyActor<ActorType>`.
type TestConfiguration = Actor.Implementation;
